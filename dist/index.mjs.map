{"version":3,"sources":["../src/env.ts","../src/version.ts","../src/track.ts","../src/dispatcher.ts","../src/session.ts","../src/constants.ts","../src/client.ts","../src/validate.ts","../src/context.tsx"],"sourcesContent":["import { Platform } from \"react-native\";\nimport version from \"./version\";\n\n// env.PKG_VERSION is replaced by Vite during build phase\nconst sdkVersion = `aptabase-reactnative@${process.env.PKG_VERSION}`;\n\nexport interface EnvironmentInfo {\n  isDebug: boolean;\n  locale: string;\n  appVersion: string;\n  appBuildNumber: string;\n  sdkVersion: string;\n  osName: string;\n  osVersion: string;\n}\n\nexport function getEnvironmentInfo(): EnvironmentInfo {\n  const [osName, osVersion] = getOperatingSystem();\n\n  const locale = \"en-US\";\n\n  return {\n    appVersion: version.appVersion || \"\",\n    appBuildNumber: version.appBuildNumber || \"\",\n    isDebug: __DEV__,\n    locale,\n    osName,\n    osVersion,\n    sdkVersion,\n  };\n}\n\nfunction getOperatingSystem(): [string, string] {\n  switch (Platform.OS) {\n    case \"android\":\n      return [\"Android\", Platform.Version.toString()];\n    case \"ios\":\n      if (Platform.isPad) {\n        return [\"iPadOS\", Platform.Version];\n      }\n      return [\"iOS\", Platform.Version];\n    default:\n      return [\"\", \"\"];\n  }\n}\n","\nimport { NativeModules } from 'react-native';\n\nconst { RNAptabaseModule } = NativeModules;\n\ntype VersionObject = {\n  appVersion: string | undefined,\n  appBuildNumber: string | undefined,\n};\n\nconst Version: VersionObject = {\n  appVersion: RNAptabaseModule && RNAptabaseModule.appVersion,\n  appBuildNumber: RNAptabaseModule && RNAptabaseModule.appBuildNumber,\n};\n\nexport default Version;","import type { AptabaseOptions } from \"./types\";\nimport { getEnvironmentInfo } from \"./env\";\nimport { AppState, Platform } from \"react-native\";\nimport { AptabaseClient } from \"./client\";\nimport { FLUSH_INTERVAL } from \"./constants\";\nimport { validate } from \"./validate\";\n\nlet _client: AptabaseClient | undefined;\n\n/**\n * Initializes the SDK with given App Key\n * @param {string} appKey - Aptabase App Key\n * @param {AptabaseOptions} options - Optional initialization parameters\n */\nexport function init(appKey: string, options?: AptabaseOptions) {\n  const [ok, msg] = validate(Platform.OS, appKey, options);\n  if (!ok) {\n    console.warn(`Aptabase: ${msg}. Tracking will be disabled.`);\n    return;\n  }\n\n  const env = getEnvironmentInfo();\n  _client = new AptabaseClient(appKey, env, options);\n\n  const flushInterval = options?.flushInterval ?? FLUSH_INTERVAL;\n  _client.startPolling(flushInterval);\n\n  if (!AppState.isAvailable) return;\n\n  AppState.addEventListener(\"change\", (next) => {\n    _client?.stopPolling();\n\n    switch (next) {\n      case \"active\":\n        _client?.startPolling(flushInterval);\n        break;\n\n      case \"background\":\n        _client?.flush();\n        break;\n    }\n  });\n}\n\n/**\n * Track an event using given properties\n * @param {string} eventName - The name of the event to track\n * @param {Object} props - Optional custom properties\n */\nexport function trackEvent(\n  eventName: string,\n  props?: Record<string, string | number | boolean>\n) {\n  _client?.trackEvent(eventName, props);\n}\n","import type { Event } from \"./types\";\nimport { EnvironmentInfo } from \"./env\";\n\nexport class EventDispatcher {\n  private _events: Event[] = [];\n  private MAX_BATCH_SIZE = 25;\n  private headers: Headers;\n  private apiUrl: string;\n\n  constructor(appKey: string, baseUrl: string, env: EnvironmentInfo) {\n    this.apiUrl = `${baseUrl}/api/v0/events`;\n    this.headers = new Headers({\n      \"Content-Type\": \"application/json\",\n      \"App-Key\": appKey,\n      \"User-Agent\": `${env.osName}/${env.osVersion} ${env.locale}`,\n    });\n  }\n\n  public enqueue(evt: Event | Event[]) {\n    if (Array.isArray(evt)) {\n      this._events.push(...evt);\n      return;\n    }\n\n    this._events.push(evt);\n  }\n\n  public async flush(): Promise<void> {\n    if (this._events.length === 0) {\n      return Promise.resolve();\n    }\n\n    let failedEvents: Event[] = [];\n    do {\n      const eventsToSend = this._events.splice(0, this.MAX_BATCH_SIZE);\n      try {\n        await this._sendEvents(eventsToSend);\n      } catch {\n        failedEvents = [...failedEvents, ...eventsToSend];\n      }\n    } while (this._events.length > 0);\n\n    if (failedEvents.length > 0) {\n      this.enqueue(failedEvents);\n    }\n  }\n\n  private async _sendEvents(events: Event[]): Promise<void> {\n    try {\n      const res = await fetch(this.apiUrl, {\n        method: \"POST\",\n        headers: this.headers,\n        credentials: \"omit\",\n        body: JSON.stringify(events),\n      });\n\n      if (res.status < 300) {\n        return Promise.resolve();\n      }\n\n      const reason = `${res.status} ${await res.text()}`;\n      if (res.status < 500) {\n        console.warn(\n          `Aptabase: Failed to send ${events.length} events because of ${reason}. Will not retry.`\n        );\n        return Promise.resolve();\n      }\n\n      throw new Error(reason);\n    } catch (e) {\n      console.error(\n        `Aptabase: Failed to send ${events.length} events. Reason: ${e}`\n      );\n      throw e;\n    }\n  }\n}\n","export function newSessionId() {\n  return [\n    randomStr(8),\n    randomStr(4),\n    randomStr(4),\n    randomStr(4),\n    randomStr(12),\n  ].join(\"-\");\n}\n\nconst characters = \"abcdefghijklmnopqrstuvwxyz0123456789\";\nconst charactersLength = characters.length;\nfunction randomStr(len: number) {\n  let result = \"\";\n  for (let i = 0; i < len; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n","// Session expires after 1 hour of inactivity\nexport const SESSION_TIMEOUT = 60 * 60 * 1000;\n\n// Flush events every 60 seconds in production, or 2 seconds in development\nexport const FLUSH_INTERVAL = __DEV__ ? 2000 : 60000;\n\n// List of hosts for each region\n// To use a self-hosted (SH) deployment, the host must be set during init\nexport const HOSTS: { [region: string]: string } = {\n  US: \"https://us.aptabase.com\",\n  EU: \"https://eu.aptabase.com\",\n  DEV: \"http://localhost:3000\",\n  SH: \"\",\n};\n","import type { Platform } from \"react-native\";\nimport type { AptabaseOptions } from \"./types\";\nimport type { EnvironmentInfo } from \"./env\";\nimport { EventDispatcher } from \"./dispatcher\";\nimport { newSessionId } from \"./session\";\nimport { HOSTS, SESSION_TIMEOUT } from \"./constants\";\n\nexport class AptabaseClient {\n  private readonly _dispatcher: EventDispatcher;\n  private readonly _env: EnvironmentInfo;\n  private _sessionId = newSessionId();\n  private _lastTouched = new Date();\n  private _flushTimer: number | undefined;\n\n  constructor(appKey: string, env: EnvironmentInfo, options?: AptabaseOptions) {\n    const [_, region] = appKey.split(\"-\");\n    const baseUrl = this.getBaseUrl(region, options);\n\n    this._env = { ...env };\n    if (options?.appVersion) {\n      this._env.appVersion = options.appVersion;\n    }\n\n    this._dispatcher = new EventDispatcher(appKey, baseUrl, env);\n  }\n\n  public trackEvent(\n    eventName: string,\n    props?: Record<string, string | number | boolean>\n  ) {\n    this._dispatcher.enqueue({\n      timestamp: new Date().toISOString(),\n      sessionId: this.evalSessionId(),\n      eventName: eventName,\n      systemProps: {\n        isDebug: this._env.isDebug,\n        locale: this._env.locale,\n        osName: this._env.osName,\n        osVersion: this._env.osVersion,\n        appVersion: this._env.appVersion,\n        appBuildNumber: this._env.appBuildNumber,\n        sdkVersion: this._env.sdkVersion,\n      },\n      props: props,\n    });\n  }\n\n  public startPolling(flushInterval: number) {\n    this.stopPolling();\n\n    this._flushTimer = setInterval(this.flush.bind(this), flushInterval);\n  }\n\n  public stopPolling() {\n    if (this._flushTimer) {\n      clearInterval(this._flushTimer);\n      this._flushTimer = undefined;\n    }\n  }\n\n  public flush(): Promise<void> {\n    return this._dispatcher.flush();\n  }\n\n  private evalSessionId() {\n    let now = new Date();\n    const diffInMs = now.getTime() - this._lastTouched.getTime();\n    if (diffInMs > SESSION_TIMEOUT) {\n      this._sessionId = newSessionId();\n    }\n    this._lastTouched = now;\n\n    return this._sessionId;\n  }\n\n  private getBaseUrl(region: string, options?: AptabaseOptions): string {\n    if (region === \"SH\") {\n      return options?.host ?? HOSTS.DEV;\n    }\n\n    return HOSTS[region];\n  }\n}\n","import type { Platform } from \"react-native\";\nimport { HOSTS } from \"./constants\";\n\nimport type { AptabaseOptions } from \"./types\";\n\nexport function validate(\n  platform: typeof Platform.OS,\n  appKey: string,\n  options?: AptabaseOptions\n): [boolean, string] {\n  if (platform !== \"android\" && platform !== \"ios\") {\n    return [false, \"This SDK is only supported on Android and iOS.\"];\n  }\n\n  const parts = appKey.split(\"-\");\n  if (parts.length !== 3 || HOSTS[parts[1]] === undefined) {\n    return [false, `App Key \"${appKey}\" is invalid`];\n  }\n\n  if (parts[1] === \"SH\" && !options?.host) {\n    return [\n      false,\n      `Host parameter must be defined when using Self-Hosted App Key.`,\n    ];\n  }\n\n  return [true, \"\"];\n}\n","import { init, trackEvent } from \"./track\";\nimport { createContext, useEffect, type ReactNode } from \"react\";\nimport { AptabaseOptions } from \"./types\";\n\ntype ContextProps = {};\n\nexport type AptabaseClient = {\n  trackEvent: typeof trackEvent;\n};\n\nconst AptabaseContext = createContext<ContextProps>({});\n\ntype Props = {\n  appKey: string;\n  options?: AptabaseOptions;\n  children: ReactNode;\n};\n\nexport function AptabaseProvider({ appKey, options, children }: Props) {\n  useEffect(() => {\n    init(appKey, options);\n  }, [appKey, options]);\n\n  return (\n    <AptabaseContext.Provider value={{}}>{children}</AptabaseContext.Provider>\n  );\n}\n\nexport function useAptabase(): AptabaseClient {\n  return { trackEvent };\n}\n"],"mappings":"AAAA,OAAS,YAAAA,MAAgB,eCCzB,OAAS,iBAAAC,MAAqB,eAE9B,GAAM,CAAE,iBAAAC,CAAiB,EAAID,EAOvBE,EAAyB,CAC7B,WAAYD,GAAoBA,EAAiB,WACjD,eAAgBA,GAAoBA,EAAiB,cACvD,EAEOE,EAAQD,EDXf,IAAME,EAAa,6BAYZ,SAASC,GAAsC,CACpD,GAAM,CAACC,EAAQC,CAAS,EAAIC,EAAmB,EAEzCC,EAAS,QAEf,MAAO,CACL,WAAYC,EAAQ,YAAc,GAClC,eAAgBA,EAAQ,gBAAkB,GAC1C,QAAS,QACT,OAAAD,EACA,OAAAH,EACA,UAAAC,EACA,WAAAH,CACF,CACF,CAEA,SAASI,GAAuC,CAC9C,OAAQG,EAAS,GAAI,CACnB,IAAK,UACH,MAAO,CAAC,UAAWA,EAAS,QAAQ,SAAS,CAAC,EAChD,IAAK,MACH,OAAIA,EAAS,MACJ,CAAC,SAAUA,EAAS,OAAO,EAE7B,CAAC,MAAOA,EAAS,OAAO,EACjC,QACE,MAAO,CAAC,GAAI,EAAE,CAClB,CACF,CE1CA,OAAS,YAAAC,EAAU,YAAAC,MAAgB,eCC5B,IAAMC,EAAN,KAAsB,CACnB,QAAmB,CAAC,EACpB,eAAiB,GACjB,QACA,OAER,YAAYC,EAAgBC,EAAiBC,EAAsB,CACjE,KAAK,OAAS,GAAGD,CAAO,iBACxB,KAAK,QAAU,IAAI,QAAQ,CACzB,eAAgB,mBAChB,UAAWD,EACX,aAAc,GAAGE,EAAI,MAAM,IAAIA,EAAI,SAAS,IAAIA,EAAI,MAAM,EAC5D,CAAC,CACH,CAEO,QAAQC,EAAsB,CACnC,GAAI,MAAM,QAAQA,CAAG,EAAG,CACtB,KAAK,QAAQ,KAAK,GAAGA,CAAG,EACxB,MACF,CAEA,KAAK,QAAQ,KAAKA,CAAG,CACvB,CAEA,MAAa,OAAuB,CAClC,GAAI,KAAK,QAAQ,SAAW,EAC1B,OAAO,QAAQ,QAAQ,EAGzB,IAAIC,EAAwB,CAAC,EAC7B,EAAG,CACD,IAAMC,EAAe,KAAK,QAAQ,OAAO,EAAG,KAAK,cAAc,EAC/D,GAAI,CACF,MAAM,KAAK,YAAYA,CAAY,CACrC,MAAQ,CACND,EAAe,CAAC,GAAGA,EAAc,GAAGC,CAAY,CAClD,CACF,OAAS,KAAK,QAAQ,OAAS,GAE3BD,EAAa,OAAS,GACxB,KAAK,QAAQA,CAAY,CAE7B,CAEA,MAAc,YAAYE,EAAgC,CACxD,GAAI,CACF,IAAMC,EAAM,MAAM,MAAM,KAAK,OAAQ,CACnC,OAAQ,OACR,QAAS,KAAK,QACd,YAAa,OACb,KAAM,KAAK,UAAUD,CAAM,CAC7B,CAAC,EAED,GAAIC,EAAI,OAAS,IACf,OAAO,QAAQ,QAAQ,EAGzB,IAAMC,EAAS,GAAGD,EAAI,MAAM,IAAI,MAAMA,EAAI,KAAK,CAAC,GAChD,GAAIA,EAAI,OAAS,IACf,eAAQ,KACN,4BAA4BD,EAAO,MAAM,sBAAsBE,CAAM,mBACvE,EACO,QAAQ,QAAQ,EAGzB,MAAM,IAAI,MAAMA,CAAM,CACxB,OAASC,EAAG,CACV,cAAQ,MACN,4BAA4BH,EAAO,MAAM,oBAAoBG,CAAC,EAChE,EACMA,CACR,CACF,CACF,EC5EO,SAASC,GAAe,CAC7B,MAAO,CACLC,EAAU,CAAC,EACXA,EAAU,CAAC,EACXA,EAAU,CAAC,EACXA,EAAU,CAAC,EACXA,EAAU,EAAE,CACd,EAAE,KAAK,GAAG,CACZ,CAEA,IAAMC,EAAa,uCACbC,EAAmBD,EAAW,OACpC,SAASD,EAAUG,EAAa,CAC9B,IAAIC,EAAS,GACb,QAASC,EAAI,EAAGA,EAAIF,EAAKE,IACvBD,GAAUH,EAAW,OAAO,KAAK,MAAM,KAAK,OAAO,EAAIC,CAAgB,CAAC,EAE1E,OAAOE,CACT,CCdO,IAAME,EAAiB,QAAU,IAAO,IAIlCC,EAAsC,CACjD,GAAI,0BACJ,GAAI,0BACJ,IAAK,wBACL,GAAI,EACN,ECNO,IAAMC,EAAN,KAAqB,CACT,YACA,KACT,WAAaC,EAAa,EAC1B,aAAe,IAAI,KACnB,YAER,YAAYC,EAAgBC,EAAsBC,EAA2B,CAC3E,GAAM,CAACC,EAAGC,CAAM,EAAIJ,EAAO,MAAM,GAAG,EAC9BK,EAAU,KAAK,WAAWD,EAAQF,CAAO,EAE/C,KAAK,KAAO,CAAE,GAAGD,CAAI,EACjBC,GAAS,aACX,KAAK,KAAK,WAAaA,EAAQ,YAGjC,KAAK,YAAc,IAAII,EAAgBN,EAAQK,EAASJ,CAAG,CAC7D,CAEO,WACLM,EACAC,EACA,CACA,KAAK,YAAY,QAAQ,CACvB,UAAW,IAAI,KAAK,EAAE,YAAY,EAClC,UAAW,KAAK,cAAc,EAC9B,UAAWD,EACX,YAAa,CACX,QAAS,KAAK,KAAK,QACnB,OAAQ,KAAK,KAAK,OAClB,OAAQ,KAAK,KAAK,OAClB,UAAW,KAAK,KAAK,UACrB,WAAY,KAAK,KAAK,WACtB,eAAgB,KAAK,KAAK,eAC1B,WAAY,KAAK,KAAK,UACxB,EACA,MAAOC,CACT,CAAC,CACH,CAEO,aAAaC,EAAuB,CACzC,KAAK,YAAY,EAEjB,KAAK,YAAc,YAAY,KAAK,MAAM,KAAK,IAAI,EAAGA,CAAa,CACrE,CAEO,aAAc,CACf,KAAK,cACP,cAAc,KAAK,WAAW,EAC9B,KAAK,YAAc,OAEvB,CAEO,OAAuB,CAC5B,OAAO,KAAK,YAAY,MAAM,CAChC,CAEQ,eAAgB,CACtB,IAAIC,EAAM,IAAI,KAEd,OADiBA,EAAI,QAAQ,EAAI,KAAK,aAAa,QAAQ,EAC5C,OACb,KAAK,WAAaX,EAAa,GAEjC,KAAK,aAAeW,EAEb,KAAK,UACd,CAEQ,WAAWN,EAAgBF,EAAmC,CACpE,OAAIE,IAAW,KACNF,GAAS,MAAQS,EAAM,IAGzBA,EAAMP,CAAM,CACrB,CACF,EC7EO,SAASQ,EACdC,EACAC,EACAC,EACmB,CACnB,GAAIF,IAAa,WAAaA,IAAa,MACzC,MAAO,CAAC,GAAO,gDAAgD,EAGjE,IAAMG,EAAQF,EAAO,MAAM,GAAG,EAC9B,OAAIE,EAAM,SAAW,GAAKC,EAAMD,EAAM,CAAC,CAAC,IAAM,OACrC,CAAC,GAAO,YAAYF,CAAM,cAAc,EAG7CE,EAAM,CAAC,IAAM,MAAQ,CAACD,GAAS,KAC1B,CACL,GACA,gEACF,EAGK,CAAC,GAAM,EAAE,CAClB,CLpBA,IAAIG,EAOG,SAASC,EAAKC,EAAgBC,EAA2B,CAC9D,GAAM,CAACC,EAAIC,CAAG,EAAIC,EAASC,EAAS,GAAIL,EAAQC,CAAO,EACvD,GAAI,CAACC,EAAI,CACP,QAAQ,KAAK,aAAaC,CAAG,8BAA8B,EAC3D,MACF,CAEA,IAAMG,EAAMC,EAAmB,EAC/BT,EAAU,IAAIU,EAAeR,EAAQM,EAAKL,CAAO,EAEjD,IAAMQ,EAAgBR,GAAS,eAAiBS,EAChDZ,EAAQ,aAAaW,CAAa,EAE7BE,EAAS,aAEdA,EAAS,iBAAiB,SAAWC,GAAS,CAG5C,OAFAd,GAAS,YAAY,EAEbc,EAAM,CACZ,IAAK,SACHd,GAAS,aAAaW,CAAa,EACnC,MAEF,IAAK,aACHX,GAAS,MAAM,EACf,KACJ,CACF,CAAC,CACH,CAOO,SAASe,EACdC,EACAC,EACA,CACAjB,GAAS,WAAWgB,EAAWC,CAAK,CACtC,CMrDA,OAAS,iBAAAC,EAAe,aAAAC,MAAiC,QAuBrD,cAAAC,MAAA,oBAdJ,IAAMC,EAAkBH,EAA4B,CAAC,CAAC,EAQ/C,SAASI,EAAiB,CAAE,OAAAC,EAAQ,QAAAC,EAAS,SAAAC,CAAS,EAAU,CACrE,OAAAN,EAAU,IAAM,CACdO,EAAKH,EAAQC,CAAO,CACtB,EAAG,CAACD,EAAQC,CAAO,CAAC,EAGlBJ,EAACC,EAAgB,SAAhB,CAAyB,MAAO,CAAC,EAAI,SAAAI,EAAS,CAEnD,CAEO,SAASE,GAA8B,CAC5C,MAAO,CAAE,WAAAC,CAAW,CACtB","names":["Platform","NativeModules","RNAptabaseModule","Version","version_default","sdkVersion","getEnvironmentInfo","osName","osVersion","getOperatingSystem","locale","version_default","Platform","AppState","Platform","EventDispatcher","appKey","baseUrl","env","evt","failedEvents","eventsToSend","events","res","reason","e","newSessionId","randomStr","characters","charactersLength","len","result","i","FLUSH_INTERVAL","HOSTS","AptabaseClient","newSessionId","appKey","env","options","_","region","baseUrl","EventDispatcher","eventName","props","flushInterval","now","HOSTS","validate","platform","appKey","options","parts","HOSTS","_client","init","appKey","options","ok","msg","validate","Platform","env","getEnvironmentInfo","AptabaseClient","flushInterval","FLUSH_INTERVAL","AppState","next","trackEvent","eventName","props","createContext","useEffect","jsx","AptabaseContext","AptabaseProvider","appKey","options","children","init","useAptabase","trackEvent"]}