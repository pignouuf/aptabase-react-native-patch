import{Platform as i}from"react-native";import{NativeModules as y}from"react-native";var{RNAptabaseModule:l}=y,I={appVersion:l&&l.appVersion,appBuildNumber:l&&l.appBuildNumber},d=I;var V="aptabase-reactnative@0.3.0";function g(){let[r,e]=O(),t="en-US";return{appVersion:d.appVersion||"",appBuildNumber:d.appBuildNumber||"",isDebug:__DEV__,locale:t,osName:r,osVersion:e,sdkVersion:V}}function O(){switch(i.OS){case"android":return["Android",i.Version.toString()];case"ios":return i.isPad?["iPadOS",i.Version]:["iOS",i.Version];default:return["",""]}}import{AppState as A,Platform as x}from"react-native";var u=class{_events=[];MAX_BATCH_SIZE=25;headers;apiUrl;constructor(e,t,s){this.apiUrl=`${t}/api/v0/events`,this.headers=new Headers({"Content-Type":"application/json","App-Key":e,"User-Agent":`${s.osName}/${s.osVersion} ${s.locale}`})}enqueue(e){if(Array.isArray(e)){this._events.push(...e);return}this._events.push(e)}async flush(){if(this._events.length===0)return Promise.resolve();let e=[];do{let t=this._events.splice(0,this.MAX_BATCH_SIZE);try{await this._sendEvents(t)}catch{e=[...e,...t]}}while(this._events.length>0);e.length>0&&this.enqueue(e)}async _sendEvents(e){try{let t=await fetch(this.apiUrl,{method:"POST",headers:this.headers,credentials:"omit",body:JSON.stringify(e)});if(t.status<300)return Promise.resolve();let s=`${t.status} ${await t.text()}`;if(t.status<500)return console.warn(`Aptabase: Failed to send ${e.length} events because of ${s}. Will not retry.`),Promise.resolve();throw new Error(s)}catch(t){throw console.error(`Aptabase: Failed to send ${e.length} events. Reason: ${t}`),t}}};function f(){return[o(8),o(4),o(4),o(4),o(12)].join("-")}var _="abcdefghijklmnopqrstuvwxyz0123456789",P=_.length;function o(r){let e="";for(let t=0;t<r;t++)e+=_.charAt(Math.floor(Math.random()*P));return e}var E=__DEV__?2e3:6e4,a={US:"https://us.aptabase.com",EU:"https://eu.aptabase.com",DEV:"http://localhost:3000",SH:""};var c=class{_dispatcher;_env;_sessionId=f();_lastTouched=new Date;_flushTimer;constructor(e,t,s){let[b,p]=e.split("-"),m=this.getBaseUrl(p,s);this._env={...t},s?.appVersion&&(this._env.appVersion=s.appVersion),this._dispatcher=new u(e,m,t)}trackEvent(e,t){this._dispatcher.enqueue({timestamp:new Date().toISOString(),sessionId:this.evalSessionId(),eventName:e,systemProps:{isDebug:this._env.isDebug,locale:this._env.locale,osName:this._env.osName,osVersion:this._env.osVersion,appVersion:this._env.appVersion,appBuildNumber:"1",sdkVersion:this._env.sdkVersion},props:t})}startPolling(e){this.stopPolling(),this._flushTimer=setInterval(this.flush.bind(this),e)}stopPolling(){this._flushTimer&&(clearInterval(this._flushTimer),this._flushTimer=void 0)}flush(){return this._dispatcher.flush()}evalSessionId(){let e=new Date;return e.getTime()-this._lastTouched.getTime()>36e5&&(this._sessionId=f()),this._lastTouched=e,this._sessionId}getBaseUrl(e,t){return e==="SH"?t?.host??a.DEV:a[e]}};function S(r,e,t){if(r!=="android"&&r!=="ios")return[!1,"This SDK is only supported on Android and iOS."];let s=e.split("-");return s.length!==3||a[s[1]]===void 0?[!1,`App Key "${e}" is invalid`]:s[1]==="SH"&&!t?.host?[!1,"Host parameter must be defined when using Self-Hosted App Key."]:[!0,""]}var n;function h(r,e){let[t,s]=S(x.OS,r,e);if(!t){console.warn(`Aptabase: ${s}. Tracking will be disabled.`);return}let b=g();n=new c(r,b,e);let p=e?.flushInterval??E;n.startPolling(p),A.isAvailable&&A.addEventListener("change",m=>{switch(n?.stopPolling(),m){case"active":n?.startPolling(p);break;case"background":n?.flush();break}})}function v(r,e){n?.trackEvent(r,e)}import{createContext as N,useEffect as w}from"react";import{jsx as D}from"react/jsx-runtime";var k=N({});function H({appKey:r,options:e,children:t}){return w(()=>{h(r,e)},[r,e]),D(k.Provider,{value:{},children:t})}function U(){return{trackEvent:v}}export{H as AptabaseProvider,h as init,v as trackEvent,U as useAptabase};
//# sourceMappingURL=index.mjs.map